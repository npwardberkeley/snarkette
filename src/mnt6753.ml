open Core_kernel
open Fields
module N = Nat

module Fq =
  Make_fp
    (N)
    (struct
      let order =
        N.of_string
          "41898490967918953402344214791240637128170709919953949071783502921025352812571106773058893763790338921418070971888458477323173057491593855069696241854796396165721416325350064441470418137846398469611935719059908164220784476160001"
    end)

let non_residue = Fq.of_int 11

module Fq3 = struct
  module Params = struct
    let non_residue = non_residue

    let frobenius_coeffs_c1 =
      [| Fq.of_string "1"
       ; Fq.of_string
           "24129022407817241407134263419936114379815707076943508280977368156625538709102831814843582780138963119807143081677569721953561801075623741378629346409604471234573396989178424163772589090105392407118197799904755622897541183052132"
       ; Fq.of_string
           "17769468560101711995209951371304522748355002843010440790806134764399814103468274958215310983651375801610927890210888755369611256415970113691066895445191924931148019336171640277697829047741006062493737919155152541323243293107868"
      |]

    let frobenius_coeffs_c2 =
      [| Fq.of_string "1"
       ; Fq.of_string
           "17769468560101711995209951371304522748355002843010440790806134764399814103468274958215310983651375801610927890210888755369611256415970113691066895445191924931148019336171640277697829047741006062493737919155152541323243293107868"
       ; Fq.of_string
           "24129022407817241407134263419936114379815707076943508280977368156625538709102831814843582780138963119807143081677569721953561801075623741378629346409604471234573396989178424163772589090105392407118197799904755622897541183052132"
      |]
  end

  include Make_fp3 (Fq) (Params)
end

module Fq2 =
  Make_fp2
    (Fq)
    (struct
      let non_residue = non_residue
    end)

module Fq6 = struct
  module Params = struct
    let non_residue = non_residue

    let frobenius_coeffs_c1 =
      Array.map ~f:Fq.of_string
        [| "1"
         ; "24129022407817241407134263419936114379815707076943508280977368156625538709102831814843582780138963119807143081677569721953561801075623741378629346409604471234573396989178424163772589090105392407118197799904755622897541183052133"
         ; "24129022407817241407134263419936114379815707076943508280977368156625538709102831814843582780138963119807143081677569721953561801075623741378629346409604471234573396989178424163772589090105392407118197799904755622897541183052132"
         ; "41898490967918953402344214791240637128170709919953949071783502921025352812571106773058893763790338921418070971888458477323173057491593855069696241854796396165721416325350064441470418137846398469611935719059908164220784476160000"
         ; "17769468560101711995209951371304522748355002843010440790806134764399814103468274958215310983651375801610927890210888755369611256415970113691066895445191924931148019336171640277697829047741006062493737919155152541323243293107868"
         ; "17769468560101711995209951371304522748355002843010440790806134764399814103468274958215310983651375801610927890210888755369611256415970113691066895445191924931148019336171640277697829047741006062493737919155152541323243293107869"
        |]
  end

  include Make_fp6 (N) (Fq) (Fq2) (Fq3) (Params)
end

module G1 = struct
  include Elliptic_curve.Make (N) (Fq)
            (struct
              let a = Fq.of_string "11"

              let b =
                Fq.of_string
                  "11625908999541321152027340224010374716841167701783584648338908235410859267060079819722747939267925389062611062156601938166010098747920378738927832658133625454260115409075816187555055859490253375704728027944315501122723426879114"
            end)

  let one : t =
    { x=
        Fq.of_string
          "16364236387491689444759057944334173579070747473738339749093487337644739228935268157504218078126401066954815152892688541654726829424326599038522503517302466226143788988217410842672857564665527806044250003808514184274233938437290"
    ; y=
        Fq.of_string
          "4510127914410645922431074687553594593336087066778984214797709122300210966076979927285161950203037801392624582544098750667549188549761032654706830225743998064330900301346566408501390638273322467173741629353517809979540986561128"
    ; z= Fq.one }
end

module G2 = struct
  include Elliptic_curve.Make (N) (Fq3)
            (struct
              let a : Fq3.t = (Fq.zero, Fq.zero, G1.Coefficients.a)

              let b : Fq3.t =
                (Fq.(G1.Coefficients.b * Fq3.non_residue), Fq.zero, Fq.zero)
            end)

  let one : t =
    let open Fq in
    { z= Fq3.one
    ; x=
        ( of_string
            "46538297238006280434045879335349383221210789488441126073640895239023832290080310125413049878152095926176013036314720850781686614265244307536450228450615346834324267478485994670716807428718518299710702671895190475661871557310"
        , of_string
            "10329739935427016564561842963551883445915701424214177782911128765230271790215029185795830999583638744119368571742929964793955375930677178544873424392910884024986348059137449389533744851691082159233065444766899262771358355816328"
        , of_string
            "19962817058174334691864015232062671736353756221485896034072814261894530786568591431279230352444205682361463997175937973249929732063490256813101714586199642571344378012210374327764059557816647980334733538226843692316285591005879"
        )
    ; y=
        ( of_string
            "5648166377754359996653513138027891970842739892107427747585228022871109585680076240624013411622970109911154113378703562803827053335040877618934773712021441101121297691389632155906182656254145368668854360318258860716497525179898"
        , of_string
            "26817850356025045630477313828875808893994935265863280918207940412617168254772789578700316551065949899971937475487458539503514034928974530432009759562975983077355912050606509147904958229398389093697494174311832813615564256810453"
        , of_string
            "32332319709358578441696731586704495581796858962594701633932927358040566210788542624963749336109940335257143899293177116050031684054348958813290781394131284657165540476824211295508498842102093219808642563477603392470909217611033"
        ) }
end

module Pairing_info = struct
  let twist : Fq3.t = Fq.(zero, one, zero)

  let loop_count =
    N.of_string
      "204691208819330962009469868104636132783269696790011977400223898462431810102935615891307667367766898917669754470400"

  let is_loop_count_neg = false

  let final_exponent =
    N.of_string
      "129119521415595396014710306456032421075529786121916339618043051454538645105373777417137765707049510513015090026587997279208509759539952171373399816556184658054246934445122434683712249758515142075912382855071692226902812699306965286452865875620478620415339135536651578138124630852841411245063114044076427626521354349718502952988285309849333541213630352110932043828698936614474460281448819530109126473106492442797180252857193080048552501189491359213783058841481431978392771722128135286229420891567559544903231970966039315305865230923024300814788334307759652908820805819427293129932717325550045066338621261382334584633469485279042507653112873505613662346162595624798718660978835342384244182483671072189980911818690903244207181753883232560300278713216908336381030175242331281836803196022816489406715804002685525498662502919760346302653911463614694097216541218340832160715975576449518733830908486041613391828183354500089193133793376316346927602330584336604894214847791219714282509301093232896394808735738348953422584365914239193758384912179069975047674736700432948221178135004609440079320720726286913134205559121306917942266019404840960000"

  let final_exponent_last_chunk_abs_of_w0 =
    N.of_string
      "204691208819330962009469868104636132783269696790011977400223898462431810102935615891307667367766898917669754470400"

  let final_exponent_last_chunk_is_w0_neg = false

  let final_exponent_last_chunk_w1 = N.of_string "1"
end

module Pairing = Pairing.Make (N) (Fq) (Fq3) (Fq6) (G1) (G2) (Pairing_info)

module Groth_maller = Groth_maller.Make (struct
  module N = N
  module G1 = G1
  module G2 = G2
  module Fq = Fq
  module Fqe = Fq3
  module Fq_target = Fq6
  module Pairing = Pairing
end)
